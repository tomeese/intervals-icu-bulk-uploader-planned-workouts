name: Generate ZWO from plan (OpenAI)

on:
  workflow_dispatch:
    inputs:
      week_start:
        description: "Week start (Monday, YYYY-MM-DD). If empty, use this week's Monday."
        required: false
        type: string
  push:
    paths:
      - "plans/plan-*.json"   # regenerate when you save a plan

permissions:
  contents: write

env:
  TZ: America/Los_Angeles

jobs:
  build-zwo:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install openai jsonschema

      - name: Resolve plan file
        id: plan
        shell: bash
        env:
          INPUT_WEEK: ${{ github.event.inputs.week_start }}
        run: |
          set -euo pipefail
          if [ -n "${INPUT_WEEK:-}" ]; then
            MON="${INPUT_WEEK}"
          else
            # Monday of current week in LA
            python - <<'PY' >> "$GITHUB_OUTPUT"
            import datetime as dt, zoneinfo
            tz=zoneinfo.ZoneInfo("America/Los_Angeles")
            today=dt.datetime.now(tz).date()
            mon=today - dt.timedelta(days=today.weekday())
            print(f"mon={mon.isoformat()}")
            PY
            MON="${{ steps.plan.outputs.mon }}"
            fi
            FILE="plans/plan-${MON}.json"
            echo "file=${FILE}" >> "$GITHUB_OUTPUT"
            test -s "$FILE" || { echo "::error::Plan not found: $FILE"; exit 1; }
            echo "Using $FILE"

      - name: Generate ZWOs
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -euo pipefail
          mkdir -p zwo
          python - <<'PY'
            import os, json, re, base64, sys, pathlib
            from jsonschema import validate, ValidationError

            PLAN = os.environ.get("PLAN_FILE") or "${{ steps.plan.outputs.file }}"
            with open(PLAN, "r", encoding="utf-8") as f:
                plan = json.load(f)

            def slug(s):
            return re.sub(r'[^A-Za-z0-9_.-]+','_', s)[:120]

            # ---- JSON schema for model output
            SCHEMA = {
            "type":"object",
            "required":["name","segments"],
            "properties":{
                "name":{"type":"string"},
                "segments":{"type":"array","items":{
                "oneOf":[
                    {"type":"object","required":["type","seconds","from_pct","to_pct"],
                    "properties":{"type":{"const":"warmup"},"seconds":{"type":"integer","minimum":60},"from_pct":{"type":"number"},"to_pct":{"type":"number"}}},
                    {"type":"object","required":["type","repeat","work","rest"],
                    "properties":{
                        "type":{"const":"repeat"},"repeat":{"type":"integer","minimum":1},
                        "work":{"type":"object","required":["type","seconds","pct"],
                                "properties":{"type":{"const":"steady"},"seconds":{"type":"integer","minimum":30},"pct":{"type":"number"}}},
                        "rest":{"type":"object","required":["type","seconds","pct"],
                                "properties":{"type":{"const":"steady"},"seconds":{"type":"integer","minimum":15},"pct":{"type":"number"}}}
                    }},
                    {"type":"object","required":["type","seconds","from_pct","to_pct"],
                    "properties":{"type":{"const":"cooldown"},"seconds":{"type":"integer","minimum":60},"from_pct":{"type":"number"},"to_pct":{"type":"number"}}}
                ]
                }}
            }
            }

            # ---- OpenAI call (Responses/Chat). Keep it simple and robust.
            # Docs: Quickstart + API reference on platform.openai.com
            from openai import OpenAI
            client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

            def call_model(design, name):
                sys_prompt = (
                "You generate structured cycling workouts as JSON segments. "
                "Return ONLY JSON matching the provided schema. Do not include XML."
                )
                user = {
                "role":"user",
                "content": f"""
            Design a workout from these inputs. Use steady ERG steps for work and recovery. 
            Include a ramp warmup 50%→75% and cooldown 75%→50%.

            Inputs:
            {json.dumps(design, indent=2)}
            """
            }

            # Prefer a small, fast model that can do structured JSON.
            # If your account has a different name, swap it here.
            resp = client.chat.completions.create(
            model="gpt-4o-mini",
            temperature=0.2,
            response_format={"type":"json_object"},
            messages=[{"role":"system","content":sys_prompt}, user]
            )
            text = resp.choices[0].message.content
            data = json.loads(text)
            validate(instance=data, schema=SCHEMA)
            # enforce sane bounds
            for seg in data["segments"]:
                if seg["type"] in ("warmup","cooldown"):
                    seg["seconds"] = int(min(max(seg["seconds"], 60), 3600))
                    seg["from_pct"] = float(max(min(seg["from_pct"], 1.5), 0.3))
                    seg["to_pct"]   = float(max(min(seg["to_pct"],   1.5), 0.3))
                elif seg["type"]=="repeat":
                    seg["repeat"] = int(min(max(seg["repeat"], 1), 20))
                    for k in ("work","rest"):
                        seg[k]["seconds"] = int(min(max(seg[k]["seconds"], 15), 3600))
                        seg[k]["pct"] = float(max(min(seg[k]["pct"], 1.8), 0.3))
            return data

            def to_zwo(spec, title):
                steps=[]
                for seg in spec["segments"]:
                    if seg["type"]=="warmup":
                        steps.append(f'<Warmup Duration="{seg["seconds"]}" PowerLow="{seg["from_pct"]}" PowerHigh="{seg["to_pct"]}"/>')
                    elif seg["type"]=="repeat":
                        steps.append(
                        f'<IntervalsT Repeat="{seg["repeat"]}" OnDuration="{seg["work"]["seconds"]}" OffDuration="{seg["rest"]["seconds"]}" '
                        f'OnPower="{seg["work"]["pct"]}" OffPower="{seg["rest"]["pct"]}" Cadence="0"/>'
                        )
                    elif seg["type"]=="cooldown":
                        steps.append(f'<Cooldown Duration="{seg["seconds"]}" PowerLow="{seg["to_pct"]}" PowerHigh="{seg["from_pct"]}"/>')
                esc=lambda s: (s.replace("&","&amp;").replace("<","&lt;").replace(">","&gt;").replace('"',"&quot;").replace("'","&apos;"))
                return f'''<?xml version="1.0" encoding="UTF-8"?>
            <workout_file>
            <author>planner</author>
            <name>{esc(title)}</name>
            <description>Auto-generated from plan</description>
            <sportType>bike</sportType>
            <tags></tags>
            <workout>
                {'\\n    '.join(steps)}
            </workout>
            </workout_file>
            '''

            def fallback_spec(design, name):
                # Deterministic backup if the model fails
                warm = {"type":"warmup","seconds":design.get("warmup_sec",600),"from_pct":0.5,"to_pct":0.75}
                rep  = {"type":"repeat","repeat":max(1,int(design.get("sets",3))),
                        "work":{"type":"steady","seconds":int(design.get("work_sec",720)),"pct":float(design.get("target_pct",0.95))},
                        "rest":{"type":"steady","seconds":int(design.get("rec_sec",300)),"pct":0.55}}
                cool = {"type":"cooldown","seconds":design.get("cooldown_sec",600),"from_pct":0.75,"to_pct":0.5}
                return {"name": name, "segments":[warm, rep, cool]}

            made = 0
            for w in plan.get("workouts", []):
                d = w.get("design")
                if not (w.get("indoor") and d and (w.get("type") in ("Virtual Ride","Ride"))):
                    continue
                name = w.get("name") or "Workout"
                # Skip obvious Z2 endurance
                if re.search(r"endurance\\s*z?2", name, flags=re.I):
                    continue

                try:
                    spec = call_model(d, name)
                except Exception as e:
                    # fallback
                    spec = fallback_spec(d, name)

                date = w.get("date")
                fname = f'{date}-{slug(name)}.zwo'
                xml = to_zwo(spec, name)
                pathlib.Path("zwo", fname).write_text(xml, encoding="utf-8")
                print("Wrote", fname); made += 1

            if made == 0:
                print("No ZWOs generated (no designed indoor workouts).")
            PY

      - name: Commit ZWOs
        run: |
          set -euo pipefail
          if git status --porcelain zwo | grep -q .; then
            git config user.name  "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add zwo/*.zwo
            git commit -m "feat(zwo): generate from plan"
            git push
          else
            echo "No changes to commit."
          fi
