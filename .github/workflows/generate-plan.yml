# .github/workflows/generate-plan.yml
name: Generate Plan
on:
  workflow_dispatch:
    inputs:
      start: { description: Start date (YYYY-MM-DD), required: true }
      intent: { description: build-week | recovery-week | race-week, required: true, default: recovery-week }
      mode:   { description: draft|final, required: true, default: draft }
      notes:  { description: Weekly notes (multiline ok), required: false }
      daily_notes_json: { description: JSON like {"YYYY-MM-DD":"..."}, required: false }
  issues:
    types: [opened, edited, reopened, labeled]

permissions:
  contents: write
  issues: write

jobs:
  generate_plan:
    if: >
      github.event_name == 'workflow_dispatch' ||
      ( github.event_name == 'issues' &&
        contains(github.event.issue.labels.*.name, 'generate-plan') )
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - run: npm ci

      - name: Extract inputs
        id: inputs
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "start=${{ inputs.start }}" >> "$GITHUB_OUTPUT"
            echo "intent=${{ inputs.intent }}" >> "$GITHUB_OUTPUT"
            echo "mode=${{ inputs.mode }}" >> "$GITHUB_OUTPUT"
            echo "end=" >> "$GITHUB_OUTPUT"
            printf "notes<<EOF\n%s\nEOF\n" "${{ inputs.notes }}" >> "$GITHUB_OUTPUT"
            printf "daily_notes_json<<EOF\n%s\nEOF\n" "${{ inputs.daily_notes_json }}" >> "$GITHUB_OUTPUT"
          else
            body=${{ toJSON(github.event.issue.body) }}
            body=$(echo -e "$body")
            start=$(grep -iE '^\s*start:\s*' <<< "$body" | head -1 | awk -F: '{sub(/^[[:space:]]*/,"",$2); print $2}')
            end=$(grep   -iE '^\s*end:\s*'   <<< "$body" | head -1 | awk -F: '{sub(/^[[:space:]]*/,"",$2); print $2}')
            intent=$(grep -iE '^\s*intent:\s*' <<< "$body" | head -1 | awk -F: '{sub(/^[[:space:]]*/,"",$2); print $2}')
            mode=$(grep   -iE '^\s*mode:\s*'   <<< "$body" | head -1 | awk -F: '{sub(/^[[:space:]]*/,"",$2); print $2}')
            notes=$(awk '
              /^ *notes: *$/ { notes=1; next }
              notes && /^``` *$/ { if (fence) { exit } else { fence=1; next } }
              notes && fence { print }
            ' <<< "$body")
            daily=$(awk '
              /^ *daily_notes_json: *$/ { hit=1; next }
              hit && /^``` *([a-zA-Z]+)? *$/ { if (fence) { exit } else { fence=1; next } }
              hit && fence { print }
            ' <<< "$body")
            echo "start=$start" >> "$GITHUB_OUTPUT"
            echo "end=$end" >> "$GITHUB_OUTPUT"
            echo "intent=${intent:-recovery-week}" >> "$GITHUB_OUTPUT"
            echo "mode=${mode:-draft}" >> "$GITHUB_OUTPUT"
            printf "notes<<EOF\n%s\nEOF\n" "$notes" >> "$GITHUB_OUTPUT"
            printf "daily_notes_json<<EOF\n%s\nEOF\n" "$daily" >> "$GITHUB_OUTPUT"
          fi

      - name: Compute OUT path
        id: out
        shell: bash
        run: |
          start="${{ steps.inputs.outputs.start }}"
          end="${{ steps.inputs.outputs.end }}"
          if [[ -z "$end" ]]; then end="auto"; fi
          if [[ "${{ steps.inputs.outputs.mode }}" == "final" ]]; then
            echo "out=plans/${start}_${end}.json" >> "$GITHUB_OUTPUT"
          else
            echo "out=plans/drafts/${start}_${end}.json" >> "$GITHUB_OUTPUT"
          fi

      - name: Generate plan JSON
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          START: ${{ steps.inputs.outputs.start }}
          END: ${{ steps.inputs.outputs.end }}
          INTENT: ${{ steps.inputs.outputs.intent }}
          NOTES: ${{ steps.inputs.outputs.notes }}
          DAILY_NOTES_JSON: ${{ steps.inputs.outputs.daily_notes_json }}
          OUT: ${{ steps.out.outputs.out }}
        run: node scripts/generate-plan.mjs

      - name: Commit plan
        id: commit
        shell: bash
        run: |
          set -e
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add plans/
          if git diff --cached --quiet; then
            echo "no_changes=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          git commit -m "chore: add ${{ steps.inputs.outputs.mode }} plan ${{ steps.inputs.outputs.start }}..${{ steps.inputs.outputs.end || 'auto-Sun' }}"
          git push
          sha=$(git rev-parse HEAD)
          echo "sha=$sha" >> "$GITHUB_OUTPUT"

      - name: Comment and maybe close issue
        if: github.event_name == 'issues' && steps.commit.outputs.no_changes != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const mode = '${{ steps.inputs.outputs.mode }}' || 'draft';
            const path = '${{ steps.out.outputs.out }}';
            const urlBlob = `https://github.com/${context.repo.owner}/${context.repo.repo}/blob/${{ steps.commit.outputs.sha }}/${path}`;
            const urlRaw  = `https://raw.githubusercontent.com/${context.repo.owner}/${context.repo.repo}/${{ steps.commit.outputs.sha }}/${path}`;
            const body = [
              `âœ… ${mode === 'final' ? 'Final' : 'Draft'} plan committed:`,
              ``,
              `- [${path}](${urlBlob})  ([raw](${urlRaw}))`,
              ``,
              mode === 'final' ? '_Closing this Issue._' : '_This stays open until you publish the draft._'
            ].join('\\n');
            await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number, body });
            if (mode === 'final') {
              await github.rest.issues.update({ owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number, state: 'closed' });
            }
