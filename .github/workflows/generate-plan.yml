name: Generate weekly plan

on:
  workflow_dispatch:
    inputs:
      start:
        description: "Week start (YYYY-MM-DD)"
        required: false
        type: string
      end:
        description: "Week end (YYYY-MM-DD)"
        required: false
        type: string
      intent:
        description: "build-week | recovery-week | race-week"
        required: false
        default: "recovery-week"
        type: choice
        options: [build-week, recovery-week, race-week]
      longride_weather:
        description: "auto | dry | rain | mixed"
        required: false
        default: "auto"
        type: choice
        options: [auto, dry, rain, mixed]
      season_hint:
        description: "summer | shoulder | winter"
        required: false
        default: "summer"
        type: choice
        options: [summer, shoulder, winter]
      monday_rest:
        description: "Exclude Monday from plan?"
        required: false
        default: "true"
        type: choice
        options: ["true", "false"]
      notes:
        description: "Optional notes to guide the plan"
        required: false
        type: string

  issues:
    types: [opened, edited, labeled]

permissions:
  contents: write   # commit plan JSON
  issues: write     # comment/close the Issue

concurrency:
  group: generate-plan-${{ github.event.issue.number || github.ref }}
  cancel-in-progress: false

jobs:
  plan:
    # Run if: manual dispatch, or labeled generate-plan, or body has start/end/intent
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issues' && (
        (github.event.action == 'labeled' && github.event.label.name == 'generate-plan') ||
        contains(github.event.issue.labels.*.name, 'generate-plan') ||
        (contains(github.event.issue.body, 'start:') &&
         contains(github.event.issue.body, 'end:') &&
         contains(github.event.issue.body, 'intent:'))
      ))
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug event (once while tuning)
        if: ${{ runner.debug == '1' }}
        run: |
          echo "event_name=${{ github.event_name }}"
          echo "action=${{ github.event.action }}"
          echo "labels=${{ toJson(github.event.issue.labels) }}"
          echo "label=${{ github.event.label.name }}"
          echo "title=${{ github.event.issue.title }}"
          echo "body<<'BODY'"
          echo "${{ github.event.issue.body }}"
          echo "BODY"

      - name: Compute inputs
        id: inputs
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "start=${{ inputs.start }}" >> $GITHUB_OUTPUT
            echo "end=${{ inputs.end }}" >> $GITHUB_OUTPUT
            echo "intent=${{ inputs.intent }}" >> $GITHUB_OUTPUT
            echo "longride_weather=${{ inputs.longride_weather }}" >> $GITHUB_OUTPUT
            echo "season_hint=${{ inputs.season_hint }}" >> $GITHUB_OUTPUT
            echo "monday_rest=${{ inputs.monday_rest }}" >> $GITHUB_OUTPUT
            printf "notes<<EOF\n%s\nEOF\n" "${{ inputs.notes }}" >> $GITHUB_OUTPUT
          else
            body=$(jq -r '.issue.body // empty' "$GITHUB_EVENT_PATH" | sed 's/\r//g')

            start=$(awk -F: '/^[[:space:]]*start:[[:space:]]*/{print $2; exit}' <<< "$body" | xargs)
            end=$(awk   -F: '/^[[:space:]]*end:[[:space:]]*/{print $2; exit}'   <<< "$body" | xargs)
            intent=$(awk -F: '/^[[:space:]]*intent:[[:space:]]*/{print $2; exit}' <<< "$body" | xargs)
            lrw=$(awk    -F: '/^[[:space:]]*longride_weather:[[:space:]]*/{print $2; exit}' <<< "$body" | xargs)
            shint=$(awk  -F: '/^[[:space:]]*season_hint:[[:space:]]*/{print $2; exit}' <<< "$body" | xargs)
            mrest=$(awk  -F: '/^[[:space:]]*monday_rest:[[:space:]]*/{print $2; exit}' <<< "$body" | xargs)

            # Extract fenced notes after 'notes:' (``` … ```) with fallback to ~~~
            notes=$(awk '
              /^ *notes: *$/ { notes=1; next }
              notes && /^``` *$/ { if (fence) { exit } else { fence=1; next } }
              notes && fence { print }
            ' <<< "$body")
            if [ -z "$notes" ]; then
              notes=$(awk '
                /^ *notes: *$/ { notes=1; next }
                notes && /^~~~ *$/ { if (fence) { exit } else { fence=1; next } }
                notes && fence { print }
              ' <<< "$body")
            fi

            echo "start=$start" >> $GITHUB_OUTPUT
            echo "end=$end" >> $GITHUB_OUTPUT
            echo "intent=${intent:-recovery-week}" >> $GITHUB_OUTPUT
            echo "longride_weather=${lrw:-auto}" >> $GITHUB_OUTPUT
            echo "season_hint=$shint" >> $GITHUB_OUTPUT
            echo "monday_rest=${mrest:-true}" >> $GITHUB_OUTPUT
            printf "notes<<EOF\n%s\nEOF\n" "$notes" >> $GITHUB_OUTPUT
          fi

      - name: Validate inputs
        shell: bash
        run: |
          set -e
          echo "START=${{ steps.inputs.outputs.start }}"
          echo "END=${{ steps.inputs.outputs.end }}"
          echo "INTENT=${{ steps.inputs.outputs.intent }}"
          if [ -z "${{ steps.inputs.outputs.start }}" ] || [ -z "${{ steps.inputs.outputs.end }}" ]; then
            echo "Missing start/end. Provide in dispatch inputs or include 'start:' and 'end:' in the Issue body." >&2
            exit 2
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install generator deps
        run: npm i ajv

      - name: Generate plan JSON
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          START: ${{ steps.inputs.outputs.start }}
          END: ${{ steps.inputs.outputs.end }}
          INTENT: ${{ steps.inputs.outputs.intent }}
          LONGRIDE_WEATHER: ${{ steps.inputs.outputs.longride_weather }}
          SEASON_HINT: ${{ steps.inputs.outputs.season_hint }}
          MONDAY_REST: ${{ steps.inputs.outputs.monday_rest }}
          NOTES: ${{ steps.inputs.outputs.notes }}
        run: |
          node scripts/generate-plan.mjs
          ls -la plans
          echo
          echo "Preview:"
          head -n 200 "plans/${{ steps.inputs.outputs.start }}_${{ steps.inputs.outputs.end }}.json" || true

      - name: Commit plan files
        id: commit
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: add plan ${{ steps.inputs.outputs.start }}..${{ steps.inputs.outputs.end }}"
          file_pattern: plans/*.json
          add_options: '-A'

      - name: Resolve commit SHA for link (fallback if nothing to commit)
        id: sha
        shell: bash
        run: |
          SHA="${{ steps.commit.outputs.commit_hash }}"
          if [ -z "$SHA" ]; then
            SHA="$(git rev-parse HEAD)"
          fi
          echo "sha=$SHA" >> "$GITHUB_OUTPUT"

      - name: Comment link and close Issue
        if: github.event_name == 'issues'
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const planPath = `plans/${{ steps.inputs.outputs.start }}_${{ steps.inputs.outputs.end }}.json`;
            const sha = `${{ steps.sha.outputs.sha }}`;
            const branch = process.env.GITHUB_REF_NAME || 'main';

            const permalink = `https://github.com/${owner}/${repo}/blob/${sha}/${planPath}`;
            const branchLink = `https://github.com/${owner}/${repo}/blob/${branch}/${planPath}`;

            const body = [
              `✅ Plan committed: [${planPath}](${permalink})`,
              ``,
              `Immutable permalink above; branch view for convenience: [${branch}](${branchLink})`,
              ``,
              `Closing this issue.`
            ].join('\n');

            await github.rest.issues.createComment({ owner, repo, issue_number, body });
            await github.rest.issues.update({ owner, repo, issue_number, state: 'closed' })
