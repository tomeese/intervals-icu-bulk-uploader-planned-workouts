# File: .github/workflows/generate-plan.yml
name: Generate Weekly Plan

on:
  issues:
    types: [opened, edited, labeled, reopened]
  workflow_dispatch:
    inputs:
      start:
        description: "Week start (YYYY-MM-DD) — will snap to Monday"
        required: false
      end:
        description: "Week end (YYYY-MM-DD) — optional; defaults to Sunday"
        required: false
      intent:
        description: "build-week | recovery-week | race-week"
        required: false
        default: "recovery-week"
      mode:
        description: "draft | final"
        required: false
        default: "draft"
      draft_path:
        description: "Optional custom path for draft JSON"
        required: false
      notes:
        description: "Weekly notes (plain text)"
        required: false
      daily_notes_json:
        description: "JSON: {\"YYYY-MM-DD\": \"...\"}"
        required: false

permissions:
  contents: write
  issues: write

jobs:
  generate:
    if: >
      (github.event_name == 'issues' &&
       contains(join(github.event.issue.labels.*.name, ','), 'generate-plan'))
      || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Parse inputs (JS, no heredocs)
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            // Pull body (for issues) or inputs (for dispatch)
            const isIssue = context.eventName === 'issues';
            const body = isIssue ? (context.payload.issue?.body || '') : '';

            // Helpers
            function kv(name) {
              if (!body) return '';
              const re = new RegExp(`(?:^|\\n)\\s*${name}:\\s*(.+)$`, 'im');
              const m = re.exec(body);
              return m ? m[1].trim() : '';
            }
            function fenced(label) {
              if (!body) return '';
              const lines = body.split('\n');
              let idx = lines.findIndex(l => l.trim().toLowerCase() === `${label.toLowerCase()}:`);
              if (idx === -1) return '';
              // find opening fence
              let i = idx + 1, fence = null;
              for (; i < lines.length; i++) {
                const t = lines[i].trim();
                if (t.startsWith('```') || t.startsWith('~~~')) { fence = t.slice(0,3); i++; break; }
                if (t) break; // non-empty non-fence line => no fenced block
              }
              if (!fence) return '';
              const out = [];
              for (; i < lines.length; i++) {
                const t = lines[i];
                if (t.trim().startsWith(fence)) break;
                out.push(t);
              }
              return out.join('\n').trim();
            }
            function snapMonday(iso) {
              if (!iso) return '';
              const [y,m,d] = iso.split('-').map(Number);
              const dt = new Date(Date.UTC(y, (m||1)-1, d||1));
              const wd = dt.getUTCDay(); // 0 Sun..6 Sat
              const diff = wd === 0 ? -6 : (1 - wd);
              dt.setUTCDate(dt.getUTCDate() + diff);
              return dt.toISOString().slice(0,10);
            }
            function sundayOfWeek(iso) {
              if (!iso) return '';
              const [y,m,d] = iso.split('-').map(Number);
              const dt = new Date(Date.UTC(y, (m||1)-1, d||1));
              const wd = dt.getUTCDay();
              const diff = wd === 0 ? -6 : (1 - wd);
              const mon = new Date(dt);
              mon.setUTCDate(dt.getUTCDate() + diff);
              mon.setUTCHours(0,0,0,0);
              const sun = new Date(mon);
              sun.setUTCDate(mon.getUTCDate() + 6);
              return sun.toISOString().slice(0,10);
            }

            // Gather raw values
            let start = isIssue ? kv('start') : (core.getInput('start') || '');
            let end = isIssue ? kv('end') : (core.getInput('end') || '');
            let intent = isIssue ? (kv('intent') || 'recovery-week') : (core.getInput('intent') || 'recovery-week');
            let mode = isIssue ? ((kv('mode') || 'draft').toLowerCase()) : ((core.getInput('mode') || 'draft').toLowerCase());
            let draftPath = isIssue ? kv('draft_path') : (core.getInput('draft_path') || '');
            const notes = isIssue ? fenced('notes') : (core.getInput('notes') || '');
            const daily = isIssue ? fenced('daily_notes_json') : (core.getInput('daily_notes_json') || '');

            if (start) start = snapMonday(start);
            if (!end && start) end = sundayOfWeek(start);

            // Determine OUT path
            let out;
            if (mode === 'draft') {
              out = draftPath || `plans/drafts/${start}_${end}.json`;
            } else {
              out = `plans/${start}_${end}.json`;
            }

            // Outputs
            core.setOutput('start', start || '');
            core.setOutput('end', end || '');
            core.setOutput('intent', intent);
            core.setOutput('mode', mode);
            core.setOutput('out', out);
            core.setOutput('notes', notes || '');
            core.setOutput('daily_notes_json', daily || '');

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps (OpenAI + Ajv)
        run: |
          npm i --no-audit --no-fund --prefer-offline ajv@^8 ajv-formats@^3

      - name: Generate plan JSON
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          START: ${{ steps.parse.outputs.start }}
          END: ${{ steps.parse.outputs.end }}
          INTENT: ${{ steps.parse.outputs.intent }}
          NOTES: ${{ steps.parse.outputs.notes }}
          DAILY_NOTES_JSON: ${{ steps.parse.outputs.daily_notes_json }}
          OUT: ${{ steps.parse.outputs.out }}
          STATIC_CONTEXT: ./static-context.md
          PLAN_RULES: ./config/plan-rules.json
        run: node scripts/generate-plan.mjs

      - name: Commit & push plan file (rebase + retry)
        shell: bash
        env:
          OUT: ${{ steps.parse.outputs.out }}
          MODE: ${{ steps.parse.outputs.mode }}
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Stage generated files
          git add "${OUT}" || true
          git add plans/latest.json 2>/dev/null || true

          if git diff --staged --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          msg_prefix=$([ "${MODE}" = "draft" ] && echo "Draft" || echo "Final")
          git commit -m "${msg_prefix}: add plan ${OUT}"

          # Figure out the branch we’re on (issues events use default branch)
          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          echo "Pushing to branch: $BRANCH"

          # Rebase on remote and push with exponential backoff (handles concurrent pushes)
          n=0
          until [ $n -ge 4 ]
          do
            if git pull --rebase --autostash origin "$BRANCH"; then
              if git push origin "HEAD:$BRANCH"; then
                echo "Pushed successfully"
                break
              fi
            fi
            n=$((n+1))
            delay=$((2 ** n))
            echo "Retry $n after ${delay}s…"
            sleep "$delay"
          done

          if [ $n -ge 4 ]; then
            echo "Push failed after retries. Please re-run the job."
            exit 1
          fi

      - name: Comment with links
        if: github.event_name == 'issues'
        uses: actions/github-script@v7
        env:
          OUT:   ${{ steps.parse.outputs.out }}
          START: ${{ steps.parse.outputs.start }}
          END:   ${{ steps.parse.outputs.end }}
          MODE:  ${{ steps.parse.outputs.mode }}
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            const { OUT, START, END, MODE } = process.env;

            // Use the branch name for the link (issues events run on default branch)
            const ref = (context.ref || '').replace('refs/heads/', '') || context.payload.repository?.default_branch || 'main';
            const url = `https://github.com/${owner}/${repo}/blob/${ref}/${OUT}`;

            const body = (MODE === 'draft')
              ? `✅ Draft plan written to \`${OUT}\` for **${START}..${END}**.\n\n[View file](${url})`
              : `✅ Final plan written to \`${OUT}\` for **${START}..${END}**.\n\n[View file](${url})`;

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: context.issue.number,
              body
            });

      - name: Close issue (final only)
        if: github.event_name == 'issues' && steps.parse.outputs.mode != 'draft'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: 'closed'
            });
